#!/usr/bin/env python

"""
This script is responsible for deploying the bonfire infrastructure
 across different VMs
"""

import util.netutil
import time
import logging
import json
import argparse
import sys
import bottle
import os
import select


def print_output_live(out):
    while not stdout.channel.exit_status_ready():
        # Only print data if there is data to read in the channel
        if stdout.channel.recv_ready():
            rl, wl, xl = select.select([stdout.channel], [], [], 0.0)
            if len(rl) > 0:
            # Print data from stdout
                out = stdout.channel.recv(1024).decode("utf-8")
                yield out.strip()


if __name__ == '__main__':
    """
    The entry point for the deploy script.
    Usage:
        deploy --json-config <path-to-json-conf>

    Example:
        deploy --json-config config/config.json

    Command Line Arguments:
        json-config (str): Path to the JSON configuration file to be used
    """

    logging.getLogger().setLevel(logging.DEBUG)

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('--json-config',
                        required=True,
                        type=str,
                        dest='json_config',
                        action='store',
                        help='Configuration file (JSON)')

    args = parser.parse_args()
    conf = {}
    with open(args.json_config) as conf_file:
        conf = json.load(conf_file)

    server_remote_path = '/tmp/bonfire/profile_server.py'
    server_ip = conf['server_ip']
    server_port = conf['server_port']
    ssh_port = conf['deploy']['ssh_port']
    username = conf['deploy']['username']
    password = conf['deploy']['password']
    profiler_base_dir = conf['deploy']['base_dir']
    logging.info("[profile base dir %s" % profiler_base_dir )
    # TODO hard-coded for now, fix later
    config_file = '/tmp/bonfire/config/config.json'
    base_dir = '/'.join(server_remote_path.split('/')[:-1]) + '/'
    create_config = base_dir + '/util/create_config_json.py'

    print('[base_dir] {0}'.format(base_dir))
    #logging.info('PYTHONPATH=%s' % pythonpath)
    pythonpath = ':'.join(['/'.join(base_dir.split('/')[:-2])] + sys.path)[1:]
    print('[pythonpath] {0}'.format(pythonpath))
    server_boot_command = (
        'PYTHONPATH={0} python {1} --json-config {2} > /tmp/bonfire/server_log.txt 2>&1 &'.format(
            pythonpath,
            server_remote_path,
            config_file))

    print('creating session to the remote VM')
    session = util.netutil.ssh_connect_or_return(server_ip, username,
                                                password, 10, ssh_port)

    print('creating remote directory to copy')
    util.netutil.create_remote_directory(server_ip, username, password,
                                        '/tmp/bonfire/', ssh_port)

    util.netutil.create_remote_directory(server_ip, username, password,
                                        '/tmp/bonfire/results/', ssh_port)

    remote_dir = '/tmp/'
    print('copying from {0} to {1}'.format(profiler_base_dir,remote_dir))
    util.netutil.copy_directory_to_target(server_ip, username, password,
                                         profiler_base_dir,
                                         remote_dir,
                                         ssh_port)

    #run the setup script on the remote endpoint
    remote_file = '{0}/bin/setup'.format(base_dir)

    target_script = 'BONFIRE_HOME={0} JAVA_HOME=/opt/oraclejdk/jdk1.8.0_60 M2_HOME=/opt/maven bash {1}'.format(base_dir, remote_file)
    logging.debug('target script = %s' % target_script)
    _, stdout, stderr = util.netutil.ssh_run_command(session, target_script)
    logging.info('=========== [setup dependencies] ===========')
 
    for chunk in print_output_live(stdout):
        logging.info(chunk)

    for chunk in print_output_live(stderr):
        logging.info(chunk)


    #setup the configfile using the newly created
    _, stdout, stderr = util.netutil.ssh_run_command(session, 'python {1} {0} {0}/config/config.json'.format(base_dir, create_config))

    for chunk in print_output_live(stdout):
        logging.info(chunk)

    for chunk in print_output_live(stderr):
        logging.info(chunk)


    _, stdout, stderr = util.netutil.ssh_run_command(session, server_boot_command)

    for chunk in print_output_live(stdout):
        logging.info(chunk)

    for chunk in print_output_live(stderr):
        logging.info(chunk)


    logging.debug(
        '[start master {0}] Boot command:  {1}'.format(
            server_ip,
            server_boot_command))
