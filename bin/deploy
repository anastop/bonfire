#!/usr/bin/env python

"""
This script is responsible for deploying the bonfire infrastructure
 across different VMs
"""

import util.netutil
import time
import logging
import json
import argparse
import sys
import bottle

if __name__ == '__main__':
    """
    The entry point for the deploy script.
    Usage:
        deploy --json-config <path-to-json-conf>

    Example:
        deploy --json-config config/config.json

    Command Line Arguments:
        json-config (str): Path to the JSON configuration file to be used
    """

    logging.getLogger().setLevel(logging.DEBUG)
 
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('--json-config',
                        required=True,
                        type=str,
                        dest='json_config',
                        action='store',
                        help='Configuration file (JSON)')

    args = parser.parse_args()
    conf = {}
    with open(args.json_config) as conf_file:
        conf = json.load(conf_file)

    server_remote_path = '/tmp/profile-anywhere/profile_server.py'
    server_ip = conf['server_ip']
    server_port = conf['server_port']
    ssh_port = conf['deploy']['ssh_port']
    username = conf['deploy']['username']
    password = conf['deploy']['password']
    profiler_base_dir = conf['deploy']['base_dir']
    # TODO hard-coded for now, fix later
    config_file = '/tmp/profile-anywhere/config/config.json'
    base_dir = '/'.join(server_remote_path.split('/')[:-2])
    #logging.info('PYTHONPATH=%s' % pythonpath)
    pythonpath = ':'.join(['/'.join(base_dir.split('/')[:-2])] + sys.path)[1:]
    server_boot_command = (
        'PYTHONPATH={0} python {1} --json-config {2} > /tmp/profile-anywhere/server_log.txt 2>&1 &'.format(
            pythonpath,
            server_remote_path,
            config_file))

    ssh_sessions = {}
    total_ips = [conf['server_ip']]
    for curr_ip in total_ips:
        session = netutil.ssh_connect_or_return(curr_ip, username,
                                                password, 10, ssh_port)
        ssh_sessions[curr_ip] = session

        netutil.create_remote_directory(curr_ip, username, password,
                                        '/tmp/profile-anywhere/', ssh_port)

        netutil.copy_directory_to_target(curr_ip, username, password,
                                         base_dir,
                                         '/tmp/',
                                         ssh_port)

    netutil.ssh_run_command(ssh_sessions[server_ip], server_boot_command)
    logging.debug(
        '[start master {0}] Boot command:  {1}'.format(
            server_ip,
            server_boot_command))
