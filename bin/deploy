#!/usr/bin/env python

"""
This script is responsible for deploying the bonfire infrastructure
 across different VMs
"""

import util.netutil
import time
import logging
import json
import argparse
import sys
import bottle
import os

if __name__ == '__main__':
    """
    The entry point for the deploy script.
    Usage:
        deploy --json-config <path-to-json-conf>

    Example:
        deploy --json-config config/config.json

    Command Line Arguments:
        json-config (str): Path to the JSON configuration file to be used
    """

    logging.getLogger().setLevel(logging.DEBUG)

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('--json-config',
                        required=True,
                        type=str,
                        dest='json_config',
                        action='store',
                        help='Configuration file (JSON)')

    args = parser.parse_args()
    conf = {}
    with open(args.json_config) as conf_file:
        conf = json.load(conf_file)

    server_remote_path = '/tmp/bonfire/profile_server.py'
    server_ip = conf['server_ip']
    server_port = conf['server_port']
    ssh_port = conf['deploy']['ssh_port']
    username = conf['deploy']['username']
    password = conf['deploy']['password']
    profiler_base_dir = conf['deploy']['base_dir']
    logging.info("[profile base dir %s" % profiler_base_dir )
    # TODO hard-coded for now, fix later
    config_file = '/tmp/bonfire/config/config.json'
    base_dir = '/'.join(server_remote_path.split('/')[:-1])
    base_dir += '/'
    print('[base_dir] {0}'.format(base_dir))
    #logging.info('PYTHONPATH=%s' % pythonpath)
    pythonpath = ':'.join(['/'.join(base_dir.split('/')[:-2])] + sys.path)[1:]
    print('[pythonpath] {0}'.format(pythonpath))
    server_boot_command = (
        'PYTHONPATH={0} python {1} --json-config {2} > /tmp/bonfire/server_log.txt 2>&1 &'.format(
            pythonpath,
            server_remote_path,
            config_file))

    print('creating session to the remote VM')
    session = util.netutil.ssh_connect_or_return(server_ip, username,
                                                password, 10, ssh_port)

    print('creating remote directory to copy')
    util.netutil.create_remote_directory(server_ip, username, password,
                                        '/tmp/bonfire/', ssh_port)

    remote_dir = '/tmp/'
    print('copying from {0} to {1}'.format(profiler_base_dir,remote_dir))
    util.netutil.copy_directory_to_target(server_ip, username, password,
                                         profiler_base_dir,
                                         remote_dir,
                                         ssh_port)

    #run the setup script on the remote endpoint
    target_script = './' + base_dir + '/bin/setup'
    create_config = base_dir + '/config/create_config_json.py'
    util.netutil.ssh_run_command(session, target_script)
    #setup the configfile using the newly created
    util.netutil.ssh_run_command(session, 'python {0}'.format(create_config))
    util.netutil.ssh_run_command(session, server_boot_command)
    logging.debug(
        '[start master {0}] Boot command:  {1}'.format(
            server_ip,
            server_boot_command))
